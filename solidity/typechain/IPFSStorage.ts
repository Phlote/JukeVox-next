/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IPFSStorageInterface extends utils.Interface {
  contractName: "IPFSStorage";
  functions: {
    "clearEntry()": FunctionFragment;
    "getEntry(address)": FunctionFragment;
    "setEntry(bytes32,uint8,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clearEntry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEntry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEntry",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "clearEntry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEntry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEntry", data: BytesLike): Result;

  events: {
    "EntryDeleted(address)": EventFragment;
    "EntrySet(address,bytes32,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntryDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntrySet"): EventFragment;
}

export type EntryDeletedEvent = TypedEvent<[string], { key: string }>;

export type EntryDeletedEventFilter = TypedEventFilter<EntryDeletedEvent>;

export type EntrySetEvent = TypedEvent<
  [string, string, number, number],
  { key: string; digest: string; hashFunction: number; size: number }
>;

export type EntrySetEventFilter = TypedEventFilter<EntrySetEvent>;

export interface IPFSStorage extends BaseContract {
  contractName: "IPFSStorage";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPFSStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clearEntry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEntry(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        digest: string;
        hashfunction: number;
        size: number;
      }
    >;

    setEntry(
      _digest: BytesLike,
      _hashFunction: BigNumberish,
      _size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clearEntry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEntry(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      digest: string;
      hashfunction: number;
      size: number;
    }
  >;

  setEntry(
    _digest: BytesLike,
    _hashFunction: BigNumberish,
    _size: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clearEntry(overrides?: CallOverrides): Promise<void>;

    getEntry(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        digest: string;
        hashfunction: number;
        size: number;
      }
    >;

    setEntry(
      _digest: BytesLike,
      _hashFunction: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EntryDeleted(address)"(key?: string | null): EntryDeletedEventFilter;
    EntryDeleted(key?: string | null): EntryDeletedEventFilter;

    "EntrySet(address,bytes32,uint8,uint8)"(
      key?: string | null,
      digest?: null,
      hashFunction?: null,
      size?: null
    ): EntrySetEventFilter;
    EntrySet(
      key?: string | null,
      digest?: null,
      hashFunction?: null,
      size?: null
    ): EntrySetEventFilter;
  };

  estimateGas: {
    clearEntry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEntry(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    setEntry(
      _digest: BytesLike,
      _hashFunction: BigNumberish,
      _size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearEntry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEntry(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEntry(
      _digest: BytesLike,
      _hashFunction: BigNumberish,
      _size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
